为什么需要工厂模式？工厂模式的作用（优点）是什么？
1. 解耦。把对象的创建和使用的过程分开。就是ClassA想调用ClassB，那么
    A只是调用B的方法，不需要管B的实例化或者不感知B如何实例化，创建的
    工作交给工厂类。
2. 代码复用。如果创建对象B的过程需要一定的代码量，而且很多地方都要用
    到，那么就会有很多重复代码。把创建对象B的代码放到工厂里统一管理。
    既减少重复代码，也方便以后对B的创建过程的修改和维护。
3. 符合迪米特法则和单一职责，使用者只需要知道如何使用产品以及负责如何
    管理产品，无需感知创建的逻辑。

有哪些工厂模式？如何实现？
一般有三种。简单工厂模式，工厂方法模式，抽象工厂模式，后两者是GOF23种
设计模式中的其中之一。

简单工厂模式
定义：创建任务简单，一个工厂干所有的活。
优点：逻辑简单。封装了创建逻辑，将创建和使用解耦。
缺点：维护成本高，需要不断修改工厂内部实现，不符合开闭原则。

工厂方法模式
定义：简单工厂升级版。对工厂开始动刀子。定义工厂接口，制定规则，但具体
实现下沉到实现体去控制。
优点：相比简单工厂，利于扩展和维护。比如当新增一种车型时，只需要创建对应
具体产品类和负责生产新品种车的具体工厂即可。符合“开闭原则”。便于扩展。
缺点：具有一定的局限性，只能生产一种产品（由接口内部方法决定），比如我要
生成BMW牌子的某级别车就不直接支持。

抽象工厂模式
定义：主要用于解决“一类产品”的创建问题，比如各种牌子的B级车，C级车。可以
从自底向上抽象归纳的角度考虑。底层有多种抽象后可以归为一类的东西，这里就是
B级车，C级车。也可以是篮球，足球，然后工厂需要负责创建不同牌子的篮球，足球。
也可以理解为抽象工厂的工厂接口比工厂方法的更多，功能更强大。
区别：
工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。
工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建
多个。
