<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wsw.mapper.BrandMapper">
    <!--
     数据库表的字段名称和实体类的属性名称不一样，则不能自动封装数据
     *起别名 ：对不一样的列名起别名，让别名和实体类的属性名一样
        *缺点：每次查询都要定义一次别名
            * sql片段
                *缺点：不灵活
         * resultMap
            1. 定义resultMap标签
            2. 在<select>标签中使用resultMap属性替换resultType属性
     *
     -->
    <!-- sql片段
     -->
    <!-- <sql id="brand_column"> -->
    <!--     id, brand_name as brandName, company_name as companyName, ordered, description, status -->
    <!-- </sql> -->
    <!-- <select id="selectAll" resultType="Brand"> -->
    <!--     select <include refid="brand_column"/> from tb_brand; -->
    <!-- </select> -->

    <!-- id: 唯一标识
     type: 映射的类型，支持别名
     -->
    <resultMap id="brandResultMap" type="Brand">
        <!--
            id: 完成主键字段的映射
                column：表的列名
                property：实体类的属性名
            result：完成一般字段的映射
         -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>
    <select id="selectAll" resultMap="brandResultMap">
        select * from tb_brand;
    </select>


    <!--
        * 参数占位符
        1. #{}：会将其替换为 ？，为了防止SQL注入
        2. ${}：拼接sql，会存在sql注入问题
        3. 使用时机：
            * 参数传递的时候：#{}
            * 表名或者列名不固定的情况下：${}，存在sql注入的问题

        * 参数类型：parameterType：可以省略
        * 特殊字符处理：
            1. 转义字符：< ==> &lt;
            2. CDATA区:
     -->
    <select id="selectByIdBrand" parameterType="int" resultMap="brandResultMap">
        select * from tb_brand where id
        <![CDATA[
            =
        ]]>
        #{id};
    </select>

    <!-- 多条件查询 -->
    <!-- <select id="selectByCondition" resultMap="brandResultMap"> -->
    <!--     select * from tb_brand -->
    <!--     where -->
    <!--         status = #{status} -->
    <!--     and company_name like #{companyName} -->
    <!--     and brand_name like #{brandName} -->
    <!-- </select> -->

    <!--
        多条件动态条件查询
            * if: 条件判断
                * test：逻辑表达式
            * 问题：
                解决方式1：恒等式
                解决方式2：<where> 替换where 关键字
    -->
    <!-- 解决方式一 -->
    <!-- <select id="selectByCondition" resultMap="brandResultMap"> -->
    <!--     select * from tb_brand -->
    <!--     where 1 = 1 -->
    <!--         <if test="status != null"> -->
    <!--             status = #{status} -->
    <!--         </if> -->
    <!--         <if test="companyName != null and companyName != ''"> -->
    <!--             and company_name like #{companyName} -->
    <!--         </if> -->
    <!--         <if test="brandName != null and brandName != ''"> -->
    <!--             and brand_name like #{brandName} -->
    <!--         </if> -->
    <!-- </select> -->

    <!-- 解决方式二 -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select * from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>


    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select * from tb_brand
        <where>
            <choose>    <!-- 相当于switch -->
                <when test="status != null">
                    status = #{status}
                </when> <!-- 相当于case -->
                <when test="companyName != null and companyName != ''"> <!-- 相当于case -->
                    company_name = #{companyName}
                </when>
                <when test="brandName != null and brandName != ''"> <!-- 相当于case -->
                    brandName = #{brandName}
                </when>
                <!-- <otherwise> &lt;!&ndash; 相当于 default &ndash;&gt; -->
                <!--     1 = 1 -->
                <!-- </otherwise> -->
            </choose>
        </where>
    </select>

    <!-- 添加 -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <!-- 修改全部字段 -->
    <!-- <update id="update"> -->
    <!--     update tb_brand -->
    <!--     set -->
    <!--         brand_name = #{brandName}, -->
    <!--         company_name = #{companyName}, -->
    <!--         ordered = #{ordered}, -->
    <!--         description = #{description}, -->
    <!--         status = #{status} -->
    <!--     where id = #{id}; -->
    <!-- </update> -->

    <!-- 修改动态字段 -->
    <update id="update">
        update tb_brand
            <set>
                <if test="brandName != null and brandName != ''">
                    brand_name = #{brandName},
                </if>
                <if test="companyName != null and companyName != ''">
                    company_name = #{companyName},
                </if>
                <if test="ordered != null">
                    ordered = #{ordered},
                </if>
                <if test="description != null and description != ''">
                    description = #{description},
                </if>
                <if test="status != null">
                    status = #{status}
                </if>
            </set>
        where id = #{id};
    </update>
    <!-- 删除一个数据 -->
    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>

    <!--
        Mybatis会将数组参数，封装为一个Map集合
            * 默认：array = 数组
            * 使用@Param注解改变map集合的默认key的名称
     -->
    <delete id="deleteByIds">
        delete from tb_brand where id
        in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        ;
    </delete>



</mapper>